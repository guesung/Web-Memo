---
description:
globs:
alwaysApply: true
---
## Core Technologies
- **Frontend**
  - TypeScript
  - React 18.3.1
  - Next.js 14.2.10 (for web application)
  - Vite 5.3.3 (for Chrome extension)
  - TailwindCSS 3.4.x

- **Backend & Database**
  - Supabase
    - Authentication
    - Database
    - Type generation

## Project Structure
- **Monorepo Structure (Turborepo)**
  - `chrome-extension/` - Chrome extension application
  - `pages/` - Chrome extension Pages (Side Panel, Content UI, etc)
  - `shared/` - Shared utilities and types
  - `packages/` - Shared packages
  - `supabase/` - Supabase configuration and types
  - `scripts/` - Development scripts
  - `tests/` - Test files

## State Management & Data Fetching
- TanStack Query (React Query) v5.59.0
- React Hook Form 7.53.2

## UI & Styling
- TailwindCSS
- Framer Motion 11.11.8
- Lucide React 0.456.0
- Next Themes
- Driver.js (for tutorials/guides)

## Development Tools
- TypeScript 5.5.3
- Biome 2.0.0
- Sentry (error tracking)

## Testing
- Vitest
- Playwright 1.47.0

## Build & Development
- Turbo 2.1.1
- Vite 5.3.3
- Cross-env (environment variables)
- Rimraf (file system operations)

## Chrome Extension Specific
- Chrome Extension Manifest V3
- Firefox Compatibility Support
  - Conditional logic using `__FIREFOX__` environment variable
- HMR (Hot Module Replacement) support

## Development Workflow
- Git-based version control
- pnpm 9.5.0 package manager
- Node.js >=18.12.0
- GitHub Actions CI/CD
- Automated version updates (`update_version.sh`)
- Code quality checks
- Automated testing
- Cross-browser testing
- Error tracking and monitoring

## Utilities
- dayjs (date handling)
- es-hangul (Korean text processing)
- youtube-transcript (YouTube caption handling)
- OpenAI API integration

## Environment Configuration
- Environment variables managed through `.env` file
- Supabase project configuration
- Sentry error tracking setup
- Cross-browser build configuration

This documentation accurately reflects the current project structure and technologies in use. Each section is based on the actual `package.json` and project structure, including the specific versions currently in use.

The project follows modern web development practices and employs a comprehensive set of tools for development, testing, and deployment. The monorepo structure using Turborepo allows for efficient code sharing and management between the Chrome extension and web application components.
